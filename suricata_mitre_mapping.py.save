import json
import subprocess
import os

# Custom keyword mapping for known test rules
keyword_mapping = {
    "icmp": {
        "ATT&CK ID": "T1046",
        "Technique": "Network Service Scanning",
        "Tactic": "Discovery"
    },
    "ping": {
        "ATT&CK ID": "T1046",
        "Technique": "Network Service Scanning",
        "Tactic": "Discovery"
    },
    "http": {
        "ATT&CK ID": "T1071",
        "Technique": "Application Layer Protocol",
        "Tactic": "Command and Control"
    },
    "tcp": {
        "ATT&CK ID": "T1046",
        "Technique": "Network Service Scanning",
        "Tactic": "Discovery"
    },
    "malicious ip": {
        "ATT&CK ID": "T1568",
        "Technique": "Dynamic Resolution",
        "Tactic": "Command and Control"
    }
}

# Paths
EVE_LOG = "/var/log/suricata/eve.json"
MITRE_FILE = "enterprise_attack.json"
OUTPUT_FILE = "reports/mitre_mapping.json"

# Ensure reports folder exists
os.makedirs("reports", exist_ok=True)

# Step 1: Download MITRE dataset if missing
if not os.path.exists(MITRE_FILE):
    print("‚¨á Downloading MITRE ATT&CK dataset...")
    subprocess.run(
        f"wget https://raw.githubusercontent.com/mitre/cti/master/enterprise-attack/enterprise-attack.json -O {MITRE_FILE}",
        shell=True,
        check=True
    )

print("üîç Extracting unique Suricata alert signatures in Python...")

    attack_data = json.load(f)

# Step 4: Map Suricata signatures ‚Üí MITRE ATT&CK
from difflib import get_close_matches

# Step 4: Map Suricata signatures ‚Üí MITRE ATT&CK with fuzzy matching
mapped_results = []
unmatched_signatures = []

# Extract MITRE technique names
mitre_techniques = []
for obj in attack_data["objects"]:
    if obj.get("type") == "attack-pattern" and "name" in obj:
        technique_id = ""
        for ref in obj.get("external_references", []):
            if ref.get("source_name") == "mitre-attack":
                technique_id = ref.get("external_id", "")
        tactic_name = obj["kill_chain_phases"][0]["phase_name"] if "kill_chain_phases" in obj and obj["kill_chain_phases"] else ""
        mitre_techniques.append({
            "Technique": obj["name"],
            "Technique_Lower": obj["name"].lower(),
            "ATT&CK ID": technique_id,
            "Tactic": tactic_name
        })

# Match each Suricata signature to the closest MITRE technique
for sig in suricata_sigs:
    matches = get_close_matches(sig, [tech["Technique_Lower"] for tech in mitre_techniques], n=1, cutoff=0.5)
    if matches:
        matched_tech = next(t for t in mitre_techniques if t["Technique_Lower"] == matches[0])
        mapped_results.append({
            "Suricata Signature": sig,
            "ATT&CK ID": matched_tech["ATT&CK ID"],
            "Technique": matched_tech["Technique"],
            "Tactic": matched_tech["Tactic"]
        })
    else:
        unmatched_signatures.append(sig)

# Step 5: Save mapping results
os.makedirs("reports", exist_ok=True)



suricata_sigs = set()with open(MITRE_FILE) as f:
suricata_sigs = set()with open(MITRE_FILE) as f:
suricata_sigs = set()with open(MITRE_FILE) as f:

suricata_sigs = set()with open(MITRE_FILE) as f:


suricata_sigs = set()with open(MITRE_FILE) as f:
m
suricata_sigs = set()with open(MITRE_FILE) as f:
suricata_sigs = set()with open(MITRE_FILE) as f:
suricata_sigs = set()with open(MITRE_FILE) as f:
suricata_sigs = set()with open(MITRE_FILE) as f:
suricata_sigs = set()with open(MITRE_FILE) as f:
suricata_sigs = set()with open(MITRE_FILE) as f:
suricata_sigs = set()with open(MITRE_FILE) as f:
suricata_sigs = set()with open(MITRE_FILE) as f:

with open(OUTPUT_FILE, "w") as f:
    json.dump(mapped_results, f, indent=4)

print(f"‚úÖ Mapped {len(mapped_results)} Suricata signatures to MITRE ATT&CK.")
print(f"üìÑ Results saved in {OUTPUT_FILE}")

if unmatched_signatures:
    print("\n‚ö† Unmatched Signatures:")
    for sig in unmatched_signatures:
        print(f" - {sig}")

